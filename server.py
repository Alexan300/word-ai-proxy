from flask import Flask, request, jsonify
from openai import OpenAI
import os
from io import BytesIO


app = Flask(__name__)

# üîë API-–∫–ª—é—á –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ª—É—á—à–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ GitHub Secrets ‚Üí Codespaces)
client = OpenAI(api_key=os.getenv("API_KEY"))

# —Å–æ–∑–¥–∞—ë–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
assistant = client.beta.assistants.create(
    name="Lawyer Assistant",
    instructions="–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.",
    model="gpt-4o-mini",
    tools=[{"type": "file_search"}]
)

file_ids = []

@app.route("/upload", methods=["POST"])
def upload():
    f = request.files["file"]
    data = f.read()
    uploaded = client.files.create(
        file=(f.filename, BytesIO(data)),
        purpose="assistants"
    )
    file_ids.append(uploaded.id)
    return jsonify({"status": "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç", "file_id": uploaded.id})


@app.route("/analyze", methods=["POST"])
def analyze():
    data = request.get_json()
    text = data.get("text", "")

    content = [{"type": "input_text", "text": text}]
    for fid in file_ids:
        content.append({"type": "input_file", "file_id": fid})

    resp = client.responses.create(
        model="gpt-4.1-mini",
        input=[{"role": "user", "content": content}]
    )

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ output
    answer = ""
    if resp.output and len(resp.output) > 0:
        for block in resp.output[0].content:
            if hasattr(block, "text"):   # —É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –µ—Å—Ç—å .text
                answer += block.text

    return jsonify({"result": answer})


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
